<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>TaskList</Title>
            <Author>Marc Alfaro</Author>
            <Description>Just a simple snippet to handle multiple tasks in parallel</Description>      
            <Shortcut>`taskl</Shortcut>      
        </Header>
        <Snippet>
            <Code Language="CSharp">
                <![CDATA[                 
                        // Spawn subtasks to fetch data by chunks
                        List<Task<DataTable>> taskList = new List<Task<DataTable>>();
                
                        for (int i = 1; i <= totalPages; i++)
                        {
                            taskList.Add(Task.Run(async () =>
                            {
                                DataTable tdt = null;
                                try
                                {
                                    using (CancellationTokenSource cts = new CancellationTokenSource(TimeSpan.FromMinutes(2)))
                                    {
                                        tdt = await someTask();
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Debug.Print(ex.Message);
                                }
                                return tdt;
                            }));

                            await Task.Delay(10);
                        }                
                
                        // Consolidate all tasks. Wait for any task that compleres and process it.
                        while (taskList.Count > 0)
                        {
                            Task<DataTable> completedTask = null;
                            try
                            {
                                completedTask = await Task.WhenAny(taskList.ToArray());
                                if (completedTask != null && completedTask.Result != null)
                                {
                                    if (dtAll == null)
                                        dtAll = completedTask.Result;
                                    else
                                        dtAll.Merge(completedTask.Result);
                                }
                            }
                            catch (Exception ex)
                            {
                                Debug.Print(ex.Message);
                            }
                            finally
                            {
                                if (completedTask != null)
                                {
                                    taskList.Remove(completedTask);
                                    completedTask.Dispose();
                                    completedTask = null;
                                }
                            }
                            await Task.Delay(10);
                        }
                ]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>